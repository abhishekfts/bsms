=============== CAKE PAGE CREATION ===============\
cake bake all <tablename>
=============== CAKE PAGE CREATION ===============

=============== CAKE MODAL CREATION ===============
cake bake modal <tablename>
=============== CAKE MODAL CREATION ===============

CREATE TABLE `users_acl` (
  `id` int NOT NULL AUTO_INCREMENT,
  `permission` int NOT NULL,
  `users` int NOT NULL,
  `controller` varchar(250) NOT NULL,
  `action` varchar(250) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_permissions_idx` (`permission`),
  KEY `fk_users_idx` (`users`),
  CONSTRAINT `fk_permissions` FOREIGN KEY (`permission`) REFERENCES `users_permissions` (`id`) ON DELETE CASCADE,
  CONSTRAINT `fk_users` FOREIGN KEY (`users`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `users_permissions` (
  `id` int NOT NULL AUTO_INCREMENT,
  `permissionsName` varchar(250) NOT NULL,
  `permissionsLevel` varchar(45) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `permissionsName_UNIQUE` (`permissionsName`),
  UNIQUE KEY `permissionsLevel_UNIQUE` (`permissionsLevel`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('1', 'View', '1');
INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('2', 'Create', '2');
INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('3', 'View_Create', '3');
INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('4', 'Update', '4');
INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('5', 'View_Update', '5');
INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('6', 'Create_Update', '6');
INSERT INTO `users_permissions` (`id`, `permissionsName`, `permissionsLevel`) VALUES ('7', 'View_Create_Update', '7');

========= Notification Trigger for create schedule =========
CREATE DEFINER=`root`@`localhost` TRIGGER `po_item_schedules_AFTER_INSERT` AFTER INSERT ON `po_item_schedules` FOR EACH ROW BEGIN
    DECLARE v_user_id INT;
    
    -- Retrieve the buyer_id from the vendor_temp table based on sap_vendor_code

     SELECT u.id INTO v_user_id FROM users u
LEFT JOIN vendor_temps v ON u.username = v.email 
LEFT JOIN po_headers p ON p.sap_vendor_code = v.sap_vendor_code
WHERE p.id = NEW.po_header_id
LIMIT 1;
    
    IF v_user_id IS NOT NULL THEN
        -- Check if a record exists in notifications table for the given user_id and notification_type
        IF EXISTS (SELECT 1 FROM notifications WHERE user_id = v_user_id AND notification_type = 'create_schedule') THEN
            -- Update the existing record with the incremented message_count
            UPDATE notifications
            SET message_count = message_count + 1
            WHERE user_id = v_user_id AND notification_type = 'create_schedule';
        ELSE
            -- Insert a new record with message_count = 1
            INSERT INTO notifications (message_count, user_id, notification_type, created_at)
            VALUES (1, v_user_id, 'create_schedule', NOW());
        END IF;
    END IF;
END


// ========== Notificatio trigger for create asn ========================

CREATE DEFINER=`root`@`localhost` TRIGGER `asn_headers_AFTER_IN` AFTER INSERT ON `asn_headers` FOR EACH ROW BEGIN
    DECLARE v_buyer_id INT;
    
    -- Retrieve the buyer_id from the vendor_temp table based on sap_vendor_code
    SELECT buyer_id INTO v_buyer_id FROM vendor_temps a
    LEFT JOIN po_headers b ON a.sap_vendor_code = b.sap_vendor_code
    WHERE b.id = NEW.po_header_id
    LIMIT 1;
    
    IF v_buyer_id IS NOT NULL THEN
        -- Check if a record exists in notifications table for the given user_id and notification_type
        IF EXISTS (SELECT 1 FROM notifications WHERE user_id = v_buyer_id AND notification_type = 'asn_material') THEN
            -- Update the existing record with the incremented message_count
            UPDATE notifications
            SET message_count = message_count + 1
            WHERE user_id = v_buyer_id AND notification_type = 'asn_material';
        ELSE
            -- Insert a new record with message_count = 1
            INSERT INTO notifications (message_count, user_id, notification_type, created_at)
            VALUES (1, v_buyer_id, 'asn_material', NOW());
        END IF;
    END IF;
END


// ==================== Vendor Status ====================
author: JThayil
date: 22.06.2023
// ==================== ============= ====================
CREATE TABLE `db_bsms`.`vendor_status` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `status` INT NOT NULL,
  `description` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `status_UNIQUE` (`status` ASC) VISIBLE);

INSERT INTO `db_bsms`.`vendor_status` (`status`, `description`) VALUES ('0', 'Sent to Vendor');
INSERT INTO `db_bsms`.`vendor_status` (`status`, `description`) VALUES ('1', 'Pending for approval');
INSERT INTO `db_bsms`.`vendor_status` (`status`, `description`) VALUES ('2', 'Sent to SAP');
INSERT INTO `db_bsms`.`vendor_status` (`status`, `description`) VALUES ('3', 'Approved');
INSERT INTO `db_bsms`.`vendor_status` (`status`, `description`) VALUES ('4', 'Rejected');
INSERT INTO `db_bsms`.`vendor_status` (`status`, `description`) VALUES ('5', 'SAP Import');

// ==================== Vendor Status ====================

// ==================== Vendor Update ====================
author: JThayil
date: 27.06.2023
// ==================== ============= ====================
ALTER TABLE `db_bsms`.`vendor_temps` 
ADD COLUMN `update_flag` INT NULL DEFAULT 0 AFTER `updated_date`,
CHANGE COLUMN `mobile` `mobile` VARCHAR(12) NULL DEFAULT NULL ,
CHANGE COLUMN `email` `email` VARCHAR(100) NULL DEFAULT NULL ;
// ==================== Vendor Update ====================

// ==================== ASN Header ====================
author: JThayil
date: 27.06.2023
// ==================== ============= ====================
ALTER TABLE `db_bsms`.`asn_headers` 
ADD COLUMN `gateout_date` DATETIME NULL DEFAULT NULL AFTER `updated_date`;

// ==================== ASN Header ====================



// ==================== Po acknowledge ====================
CREATE DEFINER=`root`@`localhost` TRIGGER `po_headers_Before_UPDATE` BEFORE UPDATE ON `po_headers` FOR EACH ROW BEGIN
    DECLARE acknowledge INT;
	DECLARE v_user_id INT;
    DECLARE u_buyer_id INT;

    
    -- Retrieve user_id and buyer_id based on the updated header_id
    SELECT u.id,vt.buyer_id,ph.acknowledge INTO v_user_id, u_buyer_id,acknowledge
FROM vendor_temps vt
LEFT JOIN po_headers ph ON vt.sap_vendor_code = ph.sap_vendor_code
LEFT JOIN users u ON vt.email = u.username
WHERE ph.id = NEW.id
LIMIT 1;

    IF acknowledge != NEW.acknowledge THEN
        IF EXISTS (SELECT 1 FROM notifications WHERE user_id = v_user_id  AND notification_type = 'po_acknowledge') THEN
            UPDATE notifications
            SET message_count = message_count + 1
            WHERE  user_id = v_user_id AND notification_type = 'po_acknowledge';
        ELSE
            -- Insert a new record for v_user_id with message_count = 1
            INSERT INTO notifications (message_count, user_id, notification_type, created_at)
            VALUES (1, v_user_id, 'po_acknowledge', NOW());
        END IF;

         IF EXISTS (SELECT 1 FROM notifications WHERE user_id = u_buyer_id  AND notification_type = 'po_acknowledge') THEN
            -- Update the existing records for v_user_id with the incremented message_count
            UPDATE notifications
            SET message_count = message_count + 1
            WHERE  user_id = u_buyer_id AND notification_type = 'po_acknowledge';
        ELSE
            -- Insert a new record for v_user_id with message_count = 1
            INSERT INTO notifications (message_count, user_id, notification_type, created_at)
            VALUES (1, u_buyer_id, 'po_acknowledge', NOW());

        END IF;
        
    END IF; 
END

// ==================== Po acknowledge ====================


// ==================== Po header acknowledge====================

ALTER TABLE `po_headers` 
ADD COLUMN `acknowledge` INT NULL DEFAULT '0' AFTER `acknowledge`;
// ==================== Po header acknowledge====================


